# goldenkey_project/pages/1_üìà_Ph√¢n_t√≠ch_C·ªï_phi·∫øu.py
import sys
import os
import streamlit as st
import pandas as pd
import plotly.express as px
# B·ªè import streamlit.components.v1 kh√¥ng c·∫ßn thi·∫øt

# Th√™m th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n v√†o Python Path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from core.stock import Stock
from core.analyzer import StockAIAnalyzer
# S·ª¨A L·ªñI: Quay l·∫°i s·ª≠ d·ª•ng h√†m v·∫Ω bi·ªÉu ƒë·ªì c·ªßa Plotly
from utils.visualization import plot_stock_chart_plotly
from config import GEMINI_API_KEY

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Ph√¢n T√≠ch C·ªï Phi·∫øu (AI)", page_icon="üìà", layout="wide")
st.markdown("<h1 style='text-align:center;'>Ph√¢n t√≠ch C·ªï phi·∫øu To√†n di·ªán v·ªõi Goldenkey AI</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- Kh·ªüi t·∫°o AI Analyzer (ch·ªâ m·ªôt l·∫ßn) ---
if 'analyzer' not in st.session_state:
    try:
        api_key = GEMINI_API_KEY or st.secrets.get("GEMINI_API_KEY")
        if not api_key or "YOUR_GEMINI_API_KEY" in api_key:
            st.error("L·ªói: Vui l√≤ng thi·∫øt l·∫≠p Gemini API Key trong `config.py` ho·∫∑c Streamlit Secrets.")
            st.stop()
        st.session_state.analyzer = StockAIAnalyzer(api_key=api_key)
    except Exception as e:
        st.error(f"L·ªói khi kh·ªüi t·∫°o AI: {e}")
        st.stop()

# --- Giao di·ªán nh·∫≠p li·ªáu ---
st.markdown("### C·∫•u h√¨nh Ph√¢n t√≠ch:")
col1, col2, col3 = st.columns([2, 1, 1])
with col1:
    ticker_input = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: FPT, HPG):", key="ticker_input").upper().strip()
with col2:
    years_input = st.slider("S·ªë nƒÉm d·ªØ li·ªáu:", 1, 10, 3, key="years_slider")
with col3:
    term_type_map = {"Qu√Ω": "quarter", "NƒÉm": "year"}
    term_type_label = st.selectbox("Chu k·ª≥ BCTC:", list(term_type_map.keys()), key="term_type_select")
    term_type_value = term_type_map[term_type_label]

if st.button("üöÄ Kh·ªüi ƒë·ªông Ph√¢n t√≠ch", type="primary", use_container_width=True):
    if not ticker_input:
        st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu!")
    else:
        st.markdown("---")
        st.header(f"K·∫øt qu·∫£ ph√¢n t√≠ch cho c·ªï phi·∫øu: {ticker_input}")

        # 1. T·∫†O ƒê·ªêI T∆Ø·ª¢NG STOCK V√Ä T·∫¢I D·ªÆ LI·ªÜU
        with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {ticker_input}..."):
            stock = Stock(symbol=ticker_input)
            df_price = stock.fetch_price_history(years=years_input)
            if df_price.empty:
                st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu gi√° cho {ticker_input}. Vui l√≤ng th·ª≠ l·∫°i.")
                st.stop()
            stock.calculate_technical_indicators()

        # (Ph·∫ßn hi·ªÉn th·ªã th√¥ng tin c√¥ng ty gi·ªØ nguy√™n)

        # 2. PH√ÇN T√çCH K·ª∏ THU·∫¨T
        st.subheader("1. Ph√¢n t√≠ch K·ªπ thu·∫≠t")
        
        # S·ª¨A L·ªñI: Quay l·∫°i s·ª≠ d·ª•ng st.plotly_chart
        with st.spinner("ƒêang v·∫Ω bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t..."):
            fig = plot_stock_chart_plotly(stock)
            st.plotly_chart(fig, use_container_width=True)

        # (Ph·∫ßn ph√¢n t√≠ch c·ªßa AI v√† ph√¢n t√≠ch c∆° b·∫£n gi·ªØ nguy√™n)
        with st.spinner("AI ƒëang ph√¢n t√≠ch bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t..."):
            tech_analysis_text = st.session_state.analyzer.analyze_technical(stock)
            with st.expander("Xem k·∫øt lu·∫≠n c·ªßa AI v·ªÅ Ph√¢n t√≠ch K·ªπ thu·∫≠t", expanded=True):
                st.markdown(tech_analysis_text)
        
        st.subheader("2. Ph√¢n t√≠ch C∆° b·∫£n")
        # ... (to√†n b·ªô code ph·∫ßn ph√¢n t√≠ch c∆° b·∫£n v√† t·ªïng h·ª£p kh√¥ng thay ƒë·ªïi)
        # ...

        st.success("‚úÖ Ph√¢n t√≠ch to√†n di·ªán ho√†n t·∫•t!")