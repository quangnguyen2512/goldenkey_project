# goldenkey_project/pages/1_üìà_Ph√¢n_t√≠ch_C·ªï_phi·∫øu.py
import sys
import os
import streamlit as st
import pandas as pd
import plotly.express as px

# Th√™m th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n v√†o Python Path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from core.stock import Stock
from core.analyzer import StockAIAnalyzer
from utils.visualization import plot_stock_chart
from config import GEMINI_API_KEY # S·ª≠ d·ª•ng API key t·ª´ file config

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Ph√¢n T√≠ch C·ªï Phi·∫øu (AI)", page_icon="üìà", layout="wide")

st.markdown("<h1 style='text-align:center;'>Ph√¢n t√≠ch C·ªï phi·∫øu To√†n di·ªán v·ªõi Goldenkey AI</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- Kh·ªüi t·∫°o AI Analyzer (ch·ªâ m·ªôt l·∫ßn) ---
try:
    # L·∫•y API key t·ª´ file config ho·∫∑c secrets
    api_key = GEMINI_API_KEY or st.secrets.get("GEMINI_API_KEY")
    if not api_key or "YOUR_GEMINI_API_KEY" in api_key:
        st.error("L·ªói: Vui l√≤ng thi·∫øt l·∫≠p Gemini API Key trong file `config.py` ho·∫∑c Streamlit Secrets.")
        st.stop()
    analyzer = StockAIAnalyzer(api_key=api_key)
except Exception as e:
    st.error(f"L·ªói khi kh·ªüi t·∫°o AI: {e}")
    st.stop()

# --- Giao di·ªán nh·∫≠p li·ªáu ---
st.markdown("### C·∫•u h√¨nh Ph√¢n t√≠ch:")
col1, col2, col3 = st.columns([2, 1, 1])
with col1:
    ticker_input = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: FPT, HPG):", key="ticker_input").upper().strip()
with col2:
    years_input = st.slider("S·ªë nƒÉm d·ªØ li·ªáu:", 1, 10, 3, key="years_slider")
with col3:
    term_type_map = {"Qu√Ω": "quarter", "NƒÉm": "year"}
    term_type_label = st.selectbox("Chu k·ª≥ BCTC:", list(term_type_map.keys()), key="term_type_select")
    term_type_value = term_type_map[term_type_label]

if st.button("üöÄ Kh·ªüi ƒë·ªông Ph√¢n t√≠ch", type="primary", use_container_width=True):
    if not ticker_input:
        st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu!")
    else:
        st.markdown("---")
        st.header(f"K·∫øt qu·∫£ ph√¢n t√≠ch cho c·ªï phi·∫øu: {ticker_input}")

        # 1. T·∫†O ƒê·ªêI T∆Ø·ª¢NG STOCK V√Ä T·∫¢I D·ªÆ LI·ªÜU
        with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {ticker_input}..."):
            stock = Stock(symbol=ticker_input)
            df_price = stock.fetch_price_history(years=years_input)
            if df_price.empty:
                st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu gi√° cho {ticker_input}. Vui l√≤ng th·ª≠ l·∫°i.")
                st.stop()
            stock.calculate_technical_indicators() # Thay b·∫±ng h√†m m·ªõi

        # Hi·ªÉn th·ªã th√¥ng tin c√¥ng ty
        with st.expander("‚ÑπÔ∏è Th√¥ng tin T·ªïng quan Doanh nghi·ªáp"):
            profile_df = stock.get_company_profile()
            if not profile_df.empty:
                profile = profile_df.iloc[0]
                c1, c2, c3, c4 = st.columns(4)
                c1.metric("S√†n ni√™m y·∫øt", profile.get('exchange', 'N/A'))
                c2.metric("V·ªën h√≥a (t·ª∑ VND)", f"{profile.get('marketCap', 0):,.0f}")
                c3.metric("Ng√†nh (EN)", profile.get('industryEn', 'N/A'))
                c4.metric("Website", profile.get('website', 'N/A'))
            else:
                st.warning("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin doanh nghi·ªáp.")

        # 2. PH√ÇN T√çCH K·ª∏ THU·∫¨T
        st.subheader("1. Ph√¢n t√≠ch K·ªπ thu·∫≠t")
        fig = plot_stock_chart(stock)
        st.plotly_chart(fig, use_container_width=True)

        with st.spinner("AI ƒëang ph√¢n t√≠ch k·ªπ thu·∫≠t..."):
            tech_analysis_text = analyzer.analyze_technical(stock)
            with st.expander("Xem k·∫øt lu·∫≠n c·ªßa AI v·ªÅ Ph√¢n t√≠ch K·ªπ thu·∫≠t", expanded=True):
                st.markdown(tech_analysis_text)
        
        # 3. PH√ÇN T√çCH C∆† B·∫¢N
        st.subheader("2. Ph√¢n t√≠ch C∆° b·∫£n")
        fundamental_analyses = []
        report_map = {
            "B√°o c√°o KQKD": "income_statement",
            "B·∫£ng CƒêKT": "balance_sheet",
            "L∆∞u chuy·ªÉn ti·ªÅn t·ªá": "cash_flow",
            "Ch·ªâ s·ªë t√†i ch√≠nh": "ratio"
        }
        
        tabs = st.tabs(list(report_map.keys()))
        
        for i, (report_label, report_name) in enumerate(report_map.items()):
            with tabs[i]:
                with st.spinner(f"ƒêang x·ª≠ l√Ω {report_label}..."):
                    df_report = stock.get_financial_report(
                        report_name, period=term_type_value, years=years_input
                    )
                    if not df_report.empty:
                        st.dataframe(df_report)
                        
                        # Tr·ª±c quan h√≥a Doanh thu & L·ª£i nhu·∫≠n
                        if report_name == 'income_statement':
                            try:
                                fig_income = px.bar(
                                    df_report.sort_values(by=['year', 'quarter']), 
                                    x='reportDate', y=['revenue', 'profitAfterTax'],
                                    title='TƒÉng tr∆∞·ªüng Doanh thu & L·ª£i nhu·∫≠n',
                                    labels={'value': 'T·ª∑ VND', 'reportDate': 'K·ª≥ b√°o c√°o'},
                                    barmode='group'
                                )
                                st.plotly_chart(fig_income, use_container_width=True)
                            except Exception as e:
                                st.warning(f"Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì: {e}")

                        # Ph√¢n t√≠ch c·ªßa AI
                        analysis_text = analyzer.analyze_financial_report(df_report, report_name, stock.symbol)
                        fundamental_analyses.append(f"**Ph√¢n t√≠ch {report_label}:**\n{analysis_text}\n\n")
                        with st.expander(f"Xem ph√¢n t√≠ch c·ªßa AI v·ªÅ {report_label}"):
                            st.markdown(analysis_text)
                    else:
                        st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho {report_label}.")

        # 4. T·ªîNG H·ª¢P V√Ä ƒê∆ØA RA KHUY·∫æN NGH·ªä
        st.subheader("3. ƒê√°nh gi√° T·ªïng th·ªÉ & Khuy·∫øn ngh·ªã c·ªßa Goldenkey AI")
        with st.spinner("AI ƒëang t·ªïng h·ª£p v√† ƒë∆∞a ra ƒë√°nh gi√° cu·ªëi c√πng..."):
            summary_text = analyzer.generate_overall_summary(
                stock.symbol, 
                tech_analysis_text, 
                fundamental_analyses
            )
            st.markdown(summary_text)

        st.success("‚úÖ Ph√¢n t√≠ch to√†n di·ªán ho√†n t·∫•t!")