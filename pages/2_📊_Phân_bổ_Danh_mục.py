# goldenkey_project/pages/2_üìä_Ph√¢n_b·ªï_Danh_m·ª•c.py
import streamlit as st
import pandas as pd
from core.portfolio import Portfolio
from utils.visualization import plot_efficient_frontier, prepare_echarts_sunburst_data, plot_cumulative_returns
from config import DEFAULT_STOCK_SYMBOLS, MONTE_CARLO_ITERATIONS
import streamlit.components.v1 as components
import json

st.set_page_config(page_title="Ph√¢n b·ªï Danh m·ª•c", page_icon="üìä", layout="wide")

st.title("üìä C√¥ng c·ª• T·ªëi ∆∞u h√≥a Danh m·ª•c ƒë·∫ßu t∆∞")
st.markdown("T√¨m ki·∫øm c√°c danh m·ª•c t·ªëi ∆∞u d·ª±a tr√™n m√¥ ph·ªèng Monte Carlo theo L√Ω thuy·∫øt Danh m·ª•c Hi·ªán ƒë·∫°i.")
st.markdown("---")

# --- H√†m h·ªó tr·ª£ ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa danh m·ª•c ---
def display_portfolio_details(portfolio_obj: Portfolio, portfolio_series: pd.Series, cash_weight: float, risk_free_rate: float, symbols: list, title: str):
    """H√†m h·ªó tr·ª£ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt cho m·ªôt danh m·ª•c t·ªëi ∆∞u."""
    
    st.header(title)
    if "Sharpe" in title:
        st.markdown("Danh m·ª•c n√†y c√¢n b·∫±ng t·ªët nh·∫•t gi·ªØa l·ª£i nhu·∫≠n v√† r·ªßi ro.")
    else:
        st.markdown("Danh m·ª•c n√†y t·∫≠p trung v√†o vi·ªác ƒë·∫°t l·ª£i nhu·∫≠n cao nh·∫•t, th∆∞·ªùng ƒëi k√®m v·ªõi r·ªßi ro cao h∆°n.")

    st.subheader("C√°c ch·ªâ s·ªë ch√≠nh c·ªßa danh m·ª•c")
    p_return = portfolio_series['return']
    p_vol = portfolio_series['volatility']
    p_sharpe = portfolio_series['sharpe']

    # ƒêi·ªÅu ch·ªânh c√°c ch·ªâ s·ªë theo t·ª∑ tr·ªçng ti·ªÅn m·∫∑t
    total_return = p_return * (1 - cash_weight) + risk_free_rate * cash_weight
    total_vol = p_vol * (1 - cash_weight)
    
    c1, c2, c3 = st.columns(3)
    c1.metric("L·ª£i nhu·∫≠n k·ª≥ v·ªçng (to√†n DM)", f"{total_return:.2%}")
    c2.metric("R·ªßi ro (to√†n DM)", f"{total_vol:.2%}")
    c3.metric("T·ª∑ l·ªá Sharpe (ph·∫ßn c·ªï phi·∫øu)", f"{p_sharpe:.2f}")

    # L·∫•y t·ª∑ tr·ªçng c·ªï phi·∫øu
    stock_weights = portfolio_series[symbols].values
    
    # T√≠nh to√°n hi·ªáu su·∫•t t√≠ch l≈©y
    with st.spinner("ƒêang t√≠nh to√°n hi·ªáu su·∫•t l·ªãch s·ª≠..."):
        performance_df = portfolio_obj.calculate_cumulative_performance(
            stock_weights=stock_weights,
            cash_weight=cash_weight,
            risk_free_rate=risk_free_rate
        )

    col1, col2 = st.columns([1, 2])
    with col1:
        st.subheader("Ph√¢n b·ªï T·ª∑ tr·ªçng")
        # T·∫°o dataframe t·ª∑ tr·ªçng, ƒë√£ bao g·ªìm t·ª∑ tr·ªçng ti·ªÅn m·∫∑t
        weights_df = pd.DataFrame(stock_weights * (1 - cash_weight), index=symbols, columns=['T·ª∑ tr·ªçng'])
        if cash_weight > 0:
            cash_df = pd.DataFrame([cash_weight], index=['Ti·ªÅn m·∫∑t'], columns=['T·ª∑ tr·ªçng'])
            weights_df = pd.concat([weights_df, cash_df])
        st.dataframe(weights_df.style.format({'T·ª∑ tr·ªçng': "{:.2%}"}))

    with col2:
        st.subheader("Bi·∫øn ƒë·ªông c·ªßa danh m·ª•c (1 nƒÉm qua)")
        fig_perf = plot_cumulative_returns(performance_df, title=f"Hi·ªáu su·∫•t {title}")
        st.plotly_chart(fig_perf, use_container_width=True)

# --- Giao di·ªán nh·∫≠p li·ªáu ---
st.sidebar.header("C·∫•u h√¨nh Danh m·ª•c")
symbols_input = st.sidebar.text_area(
    "Nh·∫≠p m√£ c·ªï phi·∫øu (c√°ch nhau b·ªüi d·∫•u ph·∫©y)",
    ", ".join(DEFAULT_STOCK_SYMBOLS)
)

years_input = st.sidebar.slider("S·ªë nƒÉm d·ªØ li·ªáu l·ªãch s·ª≠", 1, 10, 3)
risk_free_rate_input = st.sidebar.slider("L√£i su·∫•t phi r·ªßi ro (%)", 1.0, 10.0, 4.0, 0.1) / 100
cash_weight_input = st.sidebar.slider("T·ª∑ tr·ªçng ti·ªÅn m·∫∑t trong danh m·ª•c (%)", 0, 100, 0, 1) / 100

# --- TH√äM PH·∫¶N R√ÄNG BU·ªòC ---
st.sidebar.header("R√†ng bu·ªôc T·ª∑ tr·ªçng C·ªï phi·∫øu")
st.sidebar.caption("√Åp d·ª•ng cho ph·∫ßn danh m·ª•c c·ªï phi·∫øu.")
min_weight_input = st.sidebar.slider("T·ª∑ tr·ªçng t·ªëi thi·ªÉu cho m·ªói CP (%)", 0, 40, 10, 1) / 100
max_weight_input = st.sidebar.slider("T·ª∑ tr·ªçng t·ªëi ƒëa cho m·ªói CP (%)", 10, 100, 60, 1) / 100

if st.sidebar.button("üöÄ Ch·∫°y T·ªëi ∆∞u h√≥a", use_container_width=True):
    symbols = [s.strip().upper() for s in symbols_input.split(',') if s.strip()]
    if len(symbols) < 2:
        st.error("Vui l√≤ng nh·∫≠p √≠t nh·∫•t hai m√£ c·ªï phi·∫øu.")
    else:
        # --- TH√äM PH·∫¶N KI·ªÇM TRA R√ÄNG BU·ªòC ---
        if min_weight_input >= max_weight_input:
            st.sidebar.error("T·ª∑ tr·ªçng t·ªëi thi·ªÉu ph·∫£i nh·ªè h∆°n t·ª∑ tr·ªçng t·ªëi ƒëa.")
            st.stop()
        
        # Ki·ªÉm tra xem r√†ng bu·ªôc c√≥ kh·∫£ thi v·ªÅ m·∫∑t to√°n h·ªçc kh√¥ng
        if len(symbols) * min_weight_input > 1.0:
            st.sidebar.error(f"R√†ng bu·ªôc kh√¥ng kh·∫£ thi: T·ªïng c√°c t·ª∑ tr·ªçng t·ªëi thi·ªÉu ({len(symbols) * min_weight_input:.0%}) ƒë√£ v∆∞·ª£t qu√° 100%. Vui l√≤ng gi·∫£m s·ªë l∆∞·ª£ng c·ªï phi·∫øu ho·∫∑c gi·∫£m t·ª∑ tr·ªçng t·ªëi thi·ªÉu.")
            st.stop()
        
        with st.spinner("ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
            portfolio = Portfolio(symbols=symbols)
            if not portfolio.fetch_data(years=years_input):
                st.error("X·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ c·ªï phi·∫øu.")
                st.stop()
            portfolio.calculate_stats()
        
        with st.spinner(f"Th·ª±c hi·ªán m√¥ ph·ªèng Monte Carlo ({MONTE_CARLO_ITERATIONS} l·∫ßn)... ƒêi·ªÅu n√†y c√≥ th·ªÉ m·∫•t ch√∫t th·ªùi gian v·ªõi c√°c r√†ng bu·ªôc ch·∫∑t."):
            # --- TRUY·ªÄN R√ÄNG BU·ªòC V√ÄO H√ÄM ---
            mc_results = portfolio.run_monte_carlo(
                risk_free_rate=risk_free_rate_input, 
                iterations=MONTE_CARLO_ITERATIONS,
                min_weight=min_weight_input,
                max_weight=max_weight_input
            )

        # Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ kh√¥ng
        if mc_results.empty:
            st.warning("Kh√¥ng t√¨m th·∫•y danh m·ª•c n√†o th·ªèa m√£n c√°c r√†ng bu·ªôc ƒë√£ cho. Vui l√≤ng n·ªõi l·ªèng c√°c ƒëi·ªÅu ki·ªán (v√≠ d·ª•: gi·∫£m T·ª∑ tr·ªçng t·ªëi thi·ªÉu) v√† th·ª≠ l·∫°i.")
            st.stop()

        max_sharpe_port, max_return_port = portfolio.get_optimal_portfolios_from_mc(mc_results)

        if max_sharpe_port.empty or max_return_port.empty:
             st.warning("Kh√¥ng t√¨m th·∫•y danh m·ª•c t·ªëi ∆∞u. Vui l√≤ng th·ª≠ l·∫°i.")
             st.stop()

        st.header("K·∫øt qu·∫£ T·ªëi ∆∞u h√≥a Danh m·ª•c")
        st.info("D∆∞·ªõi ƒë√¢y l√† hai danh m·ª•c n·ªïi b·∫≠t ƒë∆∞·ª£c t√¨m th·∫•y t·ª´ h√†ng ng√†n k·ªãch b·∫£n m√¥ ph·ªèng.")

        tab1, tab2 = st.tabs(["üìä Danh m·ª•c Sharpe T·ªëi ƒëa", "üöÄ Danh m·ª•c L·ª£i nhu·∫≠n T·ªëi ƒëa"])

        with tab1:
            display_portfolio_details(
                portfolio_obj=portfolio,
                portfolio_series=max_sharpe_port,
                cash_weight=cash_weight_input,
                risk_free_rate=risk_free_rate_input,
                symbols=symbols,
                title="Danh m·ª•c Sharpe T·ªëi ƒëa"
            )

        with tab2:
            display_portfolio_details(
                portfolio_obj=portfolio,
                portfolio_series=max_return_port,
                cash_weight=cash_weight_input,
                risk_free_rate=risk_free_rate_input,
                symbols=symbols,
                title="Danh m·ª•c L·ª£i nhu·∫≠n T·ªëi ƒëa"
            )
        
        st.markdown("---")
        st.header("So s√°nh Ph√¢n b·ªï Danh m·ª•c theo Ng√†nh")

        col_sharpe, col_return = st.columns(2)

        with col_sharpe:
            st.subheader("Danh m·ª•c Sharpe T·ªëi ƒëa")
            sharpe_stock_weights = max_sharpe_port[symbols]
            sharpe_weights_df = pd.DataFrame(sharpe_stock_weights).rename(columns={max_sharpe_port.name: 'T·ª∑ tr·ªçng'})
            sharpe_weights_df = sharpe_weights_df[sharpe_weights_df['T·ª∑ tr·ªçng'] > 0.001]
            
            if not sharpe_weights_df.empty:
                sharpe_echarts_json = prepare_echarts_sunburst_data(sharpe_weights_df.copy())
                sharpe_echarts_data = json.loads(sharpe_echarts_json)
                
                echarts_html_sharpe = f"""
                <div id="echarts_sharpe" style="width: 100%; height: 500px;"></div>
                <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
                <script type="text/javascript">
                    var chartDomSharpe = document.getElementById('echarts_sharpe');
                    var myChartSharpe = echarts.init(chartDomSharpe);
                    var chartDataSharpe = {json.dumps(sharpe_echarts_data)};
                    var optionSharpe = {{
                        tooltip: {{ trigger: 'item', formatter: function (p) {{ return p.name + ': ' + (p.value * 100).toFixed(2) + '%'; }} }},
                        series: [
                            {{ name: 'Ng√†nh', type: 'pie', selectedMode: 'single', radius: [0, '35%'], label: {{ position: 'inner', fontSize: 12, formatter: '{{b}}\\n{{d}}%' }}, data: chartDataSharpe.innerRingData }},
                            {{ name: 'C·ªï phi·∫øu', type: 'pie', radius: ['50%', '70%'], label: {{ formatter: '{{b}}: {{d}}%' }}, data: chartDataSharpe.outerRingData }}
                        ]
                    }};
                    myChartSharpe.setOption(optionSharpe);
                </script>
                """
                components.html(echarts_html_sharpe, height=520)
            else:
                st.info("Kh√¥ng c√≥ c·ªï phi·∫øu ƒë·ªÉ ph√¢n t√≠ch.")

        with col_return:
            st.subheader("Danh m·ª•c L·ª£i nhu·∫≠n T·ªëi ƒëa")
            return_stock_weights = max_return_port[symbols]
            return_weights_df = pd.DataFrame(return_stock_weights).rename(columns={max_return_port.name: 'T·ª∑ tr·ªçng'})
            return_weights_df = return_weights_df[return_weights_df['T·ª∑ tr·ªçng'] > 0.001]

            if not return_weights_df.empty:
                return_echarts_json = prepare_echarts_sunburst_data(return_weights_df.copy())
                return_echarts_data = json.loads(return_echarts_json)
                
                echarts_html_return = f"""
                <div id="echarts_return" style="width: 100%; height: 500px;"></div>
                <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
                <script type="text/javascript">
                    var chartDomReturn = document.getElementById('echarts_return');
                    var myChartReturn = echarts.init(chartDomReturn);
                    var chartDataReturn = {json.dumps(return_echarts_data)};
                    var optionReturn = {{
                        tooltip: {{ trigger: 'item', formatter: function (p) {{ return p.name + ': ' + (p.value * 100).toFixed(2) + '%'; }} }},
                        series: [
                            {{ name: 'Ng√†nh', type: 'pie', selectedMode: 'single', radius: [0, '35%'], label: {{ position: 'inner', fontSize: 12, formatter: '{{b}}\\n{{d}}%' }}, data: chartDataReturn.innerRingData }},
                            {{ name: 'C·ªï phi·∫øu', type: 'pie', radius: ['50%', '70%'], label: {{ formatter: '{{b}}: {{d}}%' }}, data: chartDataReturn.outerRingData }}
                        ]
                    }};
                    myChartReturn.setOption(optionReturn);
                </script>
                """
                components.html(echarts_html_return, height=520)
            else:
                st.info("Kh√¥ng c√≥ c·ªï phi·∫øu ƒë·ªÉ ph√¢n t√≠ch.")

        st.markdown("---")
        st.header("ƒê∆∞·ªùng bi√™n Hi·ªáu qu·∫£ & C√°c Danh m·ª•c M√¥ ph·ªèng")
        fig_ef = plot_efficient_frontier(mc_results, portfolio.symbols)
        st.plotly_chart(fig_ef, use_container_width=True)